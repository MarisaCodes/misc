---
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import CustomLink from "../../components/CustomLink";
import Message from "../../components/Message";
import Home from "../../components/page-comps/Home";
import PostContent from "../../components/PostContent.astro";
import Layout from "../../layouts/Layout.astro";
const animes = await Astro.glob("../../content/anime/*.md");
---

<style>
  .custom {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 5;
    overflow: hidden;
  }
  .search-div {
    display: flex;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 10px;
  }
</style>
<Layout>
  <Home client:load>
    <div class="p-3">
      <Breadcrumbs>
        <li><a href="/">Home</a></li>
        <li class="is-active"><a href="/anime">anime</a></li>
      </Breadcrumbs>
      <div class="search-div" style="max-width: fit-content;">
        <input
          type="search"
          class="input"
          id="search-anime-input"
          placeholder="Filter with keywords..."
        />
        <span class="tag is-info is-medium"
          >Filter using anime related keywords</span
        >
      </div>
    </div>
    {
      animes.map(({ frontmatter, Content }) => {
        const { title, thumbnail, href } = frontmatter;
        return (
          <div class="p-3">
            <Message bodyBg={true} client:load header={title}>
              <PostContent thumbnail={thumbnail}>
                <div class="custom">
                  <Content />
                </div>
                <div class="has-text-centered">
                  <CustomLink href={href} text="Read more..." client:load />
                </div>
              </PostContent>
            </Message>
          </div>
        );
      })
    }
  </Home>
</Layout>

<script>
  const el = {
    messages: document.querySelectorAll(".message"),
    searchInput: document.querySelector(
      "#search-anime-input"
    ) as HTMLInputElement,
  };

  el.searchInput.addEventListener("input", () => {
    const val = el.searchInput.value.toLocaleLowerCase();
    console.log(val);
    if (!val) {
      el.messages.forEach((message) => {
        message.classList.remove("is-hidden");
      });
    } else {
      el.messages.forEach((message) => {
        const contents = message.textContent;
        if (contents.toLocaleLowerCase().includes(val)) {
          message.classList.remove("is-hidden");
        } else {
          message.classList.add("is-hidden");
        }
      });
    }
  });
</script>
